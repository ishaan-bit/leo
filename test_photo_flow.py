"""
Test script to upload an image and verify the complete flow
"""
import requests
import base64
import time
import json

# Test image (1x1 red pixel PNG)
TEST_IMAGE_BASE64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8DwHwAFBQIAX8jx0gAAAABJRU5ErkJggg=="

def create_test_image():
    """Create a simple test image file"""
    image_data = base64.b64decode(TEST_IMAGE_BASE64)
    with open('test_image.png', 'wb') as f:
        f.write(image_data)
    print("‚úÖ Created test image: test_image.png")

def upload_image():
    """Upload test image to localhost:3000"""
    print("\nüì§ Uploading image to localhost:3000...")
    
    with open('test_image.png', 'rb') as f:
        files = {'image': ('test.png', f, 'image/png')}
        data = {'pigId': 'testpig'}
        
        response = requests.post(
            'http://localhost:3000/api/reflect/upload-image',
            files=files,
            data=data
        )
    
    print(f"üì• Response status: {response.status_code}")
    print(f"üì• Response body: {response.json()}")
    
    if response.status_code == 200:
        result = response.json()
        reflection_id = result.get('reflectionId')
        print(f"\n‚úÖ Image uploaded successfully!")
        print(f"   Reflection ID: {reflection_id}")
        print(f"   Status: {result.get('status')}")
        return reflection_id
    else:
        print(f"‚ùå Upload failed: {response.text}")
        return None

def check_reflection_status(rid, upstash_url, upstash_token):
    """Check reflection status in Upstash"""
    print(f"\nüîç Checking reflection status: {rid}")
    
    headers = {
        'Authorization': f'Bearer {upstash_token}',
        'Content-Type': 'application/json',
    }
    
    response = requests.post(
        upstash_url,
        headers=headers,
        json=['GET', f'refl:{rid}'],
        timeout=10
    )
    
    if response.status_code == 200:
        result = response.json()
        reflection_json = result.get('result')
        
        if reflection_json:
            reflection = json.loads(reflection_json)
            print(f"‚úÖ Reflection found:")
            print(f"   Status: {reflection.get('processing_status', 'unknown')}")
            print(f"   Has image_base64: {bool(reflection.get('image_base64'))}")
            print(f"   Original text: {reflection.get('original_text', 'N/A')[:50]}...")
            print(f"   Normalized text: {reflection.get('normalized_text', 'N/A')[:50]}...")
            return reflection
        else:
            print("‚ùå Reflection not found in Upstash")
            return None
    else:
        print(f"‚ùå Failed to fetch reflection: {response.status_code}")
        return None

if __name__ == '__main__':
    # Read .env for Upstash credentials
    import os
    from dotenv import load_dotenv
    load_dotenv()
    
    UPSTASH_URL = os.getenv('KV_REST_API_URL')
    UPSTASH_TOKEN = os.getenv('KV_REST_API_TOKEN')
    
    if not UPSTASH_URL or not UPSTASH_TOKEN:
        print("‚ùå Missing UPSTASH credentials in .env")
        exit(1)
    
    # Create test image
    create_test_image()
    
    # Upload image
    rid = upload_image()
    
    if rid:
        # Wait for worker to process
        print("\n‚è≥ Waiting 5 seconds for image-worker to process...")
        time.sleep(5)
        
        # Check status
        reflection = check_reflection_status(rid, UPSTASH_URL, UPSTASH_TOKEN)
        
        if reflection:
            status = reflection.get('processing_status')
            if status == 'complete':
                print("\nüéâ SUCCESS! Complete flow working:")
                print("   1. ‚úÖ Image uploaded to Vercel API")
                print("   2. ‚úÖ Saved as base64 to Upstash")
                print("   3. ‚úÖ Worker processed with GPU")
                print("   4. ‚úÖ Narrative generated")
                print("   5. ‚úÖ Ready for enrichment")
            elif status == 'processing':
                print("\n‚è≥ Still processing... wait a bit longer")
            elif status == 'pending':
                print("\n‚ö†Ô∏è  Still pending - worker might not be running")
            else:
                print(f"\n‚ö†Ô∏è  Unknown status: {status}")
    
    # Cleanup
    import os
    if os.path.exists('test_image.png'):
        os.remove('test_image.png')
        print("\nüßπ Cleaned up test image")
